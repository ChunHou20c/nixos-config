(defwindow status_bar
  :monitor 0 ;; Optional for X11
  :stacking "bg"
  :namespace "bar"
  :exclusive true
  :geometry (geometry
              :width "100%"
              :height "30px"
	      :anchor "top center"
	    )
    (box :class "bar_layout" :space-evenly true :orientation "horizontal"
      :vexpand true :hexpand true 
      (workspace_widget)
      (window_title_widget)
      (right_tray)
    )
  )

(defwidget workspace_widget [] 
  (box 
    :space-evenly false 
    :class "status-bar" 
    :orientation "horizontal" 
    :halign "start"
    :spacing 2

    (label :text "${current_workspace}" :visible false) ;; this line make sure the current_workspace variable get updated else it will stuck at the same number
    (for workspace in workspaces
      (eventbox :class "workspace_button" :onclick "hyprctl dispatch workspace ${workspace.id}"
	(box :class "${current_workspace == workspace.id ? "workspace_entry_active" : "workspace_entry_normal" }" 
	  (label :text "${workspace.id}")
	)
      )
    )
  )
)

(defwidget window_title_widget [] 
  (box 
    :class "window_title" 
    :space-evenly false 
    :halign "center" 
      (label :text "${window_title == "null" ? "" : replace(window_title,"(^(?:\\S+\\s+\?){5,})","~ " )}")
  )
)

(defwidget right_tray [] 
  (box 
    :class "right_tray" 
    :space-evenly false 
    :halign "end" 
    :spacing 5
  (eventbox :class "idle_inhibitor_button"
    (box :class "idle_inhibitor_box"
     (label :text "")
    )
  )
  (wifi)
  (bright)
  (volume)
  (label :class "bar_sep" :text "|")
  (mem)
  (bat)
  (label :class "bar_sep" :text "|")
  (clock_module)
 )
)

(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true"
    :onhoverlost "eww update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "10" 
      (label :text "${time.hour}" :class "clock_time_class" )
      (label :text ":" :class "clock_time_sep" )
      (label :text "${time.min}" :class "clock_minute_class")
      (revealer :transition "slideleft"
	:reveal time_rev
	:duration "350ms"
	(button :class "clock_date_class"
	  :onclick "~/.config/eww/scripts/eww_toggle_window.sh calendar" clock_date
	)
      )
    )
  )
)

(defwidget volume []
  (eventbox :onhover "eww update vol_reveal=true"
    :onhoverlost "eww update vol_reveal=false"
    (box :space-evenly "false" :orientation "h" :spacing "3" 
      (button   
	:onclick "~/.config/eww/scripts/eww_toggle_window.sh volume" 
	:class "volume_icon" "${volume_percent > 65 ? "󰕾" : volume_percent > 35 ? "󰖀" : "󰕿" }")
      (revealer :transition "slideleft"
	:reveal vol_reveal
	:duration "350ms"
	(scale :class "volbar"
	  :value volume_percent
	  :orientation "h"
	  :tooltip "${volume_percent}%"
	  :max 100
	  :min 0
	  :onchange "amixer -D default sset Master {}%" 
	)
      )	
    )
  )
)

(defwidget bright []
  (eventbox :onhover "eww update br_reveal=true" :onhoverlost "eww update br_reveal=false"
    (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
      (label :text "${
	brightness_percent > 75 ? "󰃠" :
	brightness_percent > 50 ? "󰃝" :
	brightness_percent > 25 ? "󰃟" : "󰃞"
	}" 
	:class "bright_icon" :tooltip "brightness")
      (revealer :transition "slideleft"
	:reveal br_reveal
	:duration "350ms"
	(scale  
	  :class "brightbar"
	  :value brightness_percent
	  :orientation "h"
	  :tooltip "${brightness_percent}%"
	  :max 100
	  :min 0
	  :onchange "brightnessctl set {}%" 
	)
      )
    )
  )
)

(defwidget bat []
  (box :class "bat_module" :vexpand "false" :hexpand "false" 
    (circular-progress :value "${EWW_BATTERY.BAT1.capacity}"
      :class "batbar"
      :thickness 4
      (button 
        :class "iconbat"
        :limit-width 2
        :tooltip "Battery: ${EWW_BATTERY.BAT1.capacity}%"
        :show_truncated false
        :wrap false
        "󰧞"
      )
    )
  )
)

(defwidget mem []
  (box 
    :class "mem_module" 
    :vexpand "false" 
    :hexpand "false" 
    (circular-progress 
      :value "${EWW_RAM.used_mem_perc}"
      :class "membar"
      :thickness 4
      (button 
        :class "iconmem"
        :limit-width 2
        :tooltip "RAM: ${round(EWW_RAM.used_mem * 0.0000000009313225746154785, 2)} / ${round(EWW_RAM.total_mem * 0.0000000009313225746154785, 2)} GB"
        :show_truncated false
        :wrap false
        "󰧞"
      )
    )
  )
)

(defwidget wifi [] 
  (eventbox 
    :onhover "eww update wifi_rev=true"
    :onhoverlost "eww update wifi_rev=false"
    (box 
      :vexpand "false" 
      :hexpand "false" 
      :space-evenly "false"
      (button 
	:class "module-wifi" 
	:wrap "false" 
	:limit-width 12 "${net.signal == "" ? "󰤭" :"󰤨"}")
      (revealer 
	:transition "slideright"
	:reveal wifi_rev
	:duration "350ms"
	(label    
	  :class "module_essid"
	  :text "${net.ssid}"
	  :orientation "h"
	)
      )
    )
  )
)

(defwindow audio_ctl
  :monitor 0 ;; Optional for X11
  :geometry (geometry :x "10px" 
   :y "10px" 
   :anchor "top right"
   :width "280px" 
   :height "60px")
 (audio)
)

(defwidget audio []
  (box 
    :class "audio-box" 
    :orientation "v" 
    :space-evenly "false" 
    :vexpand "false" 
    :hexpand "false"
    (box 
      :halign "v" 
      :space-evenly "false" 
      :hexpand "false" 
      :vexpand "false"
      (box :class "speaker_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
	(label 
	  :class "speaker_text" 
	  :text "speaker" 
	  :valign "center" 
	  :halign "left" 
	)
	(box 
	  :class "speaker_bar" 
	  :halign "center" 
	  :vexpand "false" 
	  :hexpand "false"
	  (scale :value volume_percent
	    :space-evenly "false"
	    :orientation "h"
	    :onchange "amixer -D default sset Master {}%" 
	    :tooltip "volume on ${volume_percent}%"
	    :max 100
	    :min 0
	  )
	)
      )
    )
    (label :text "" :class "audio_sep" :halign "center")
    (box 
      :halign "v" 
      :space-evenly "false" 
      :hexpand "false" 
      :vexpand "false"
      (box :class "mic_icon" :orientation "v")
      (box 
	:orientation "v" 
	:halign "center" 
	:vexpand "false" 
	:hexpand "false"
	(label :class "mic_text" :text "mic" :valign "center" :halign "left")
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	  (scale :value mic_percent
	    :space-evenly "false"
	    :orientation "h"
	    :tooltip "mic on ${mic_percent}%"
	    :onchange "amixer -D default sset Capture {}%" 
	    :max 100
	    :min 0
	  )
	)
      )
    )
  )
)

(defwindow calendar

  :monitor 0 ;; Optional for X11
  :geometry (geometry :x "10px" 
    :y "10px" 
    :anchor "top right"
    :width "270px" 
    :height "60px")
    (cal)
)

(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal" 
	:day 20 
	:year 2025
      )
    )
  )
)
